/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TenPinBowling;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.NoSuchElementException;
import java.util.Scanner;

public class App {
    private static Scanner fileInput;
    
    public static void TenPinMain(){
        
        Scanner input = new Scanner(System.in);
        System.out.println("Enter your scores file path:");
        Game g1 = new Game();
        Game g2 = new Game();
        String playerName = null;
        
        //creates a Path object based on the user input
        Path path = Paths.get(input.nextLine());

        ArrayList<String> JeffPinfallsList = new ArrayList<>();
        ArrayList<String> JohnPinfallsList = new ArrayList<>();
        
        ArrayList<Integer> JeffsPin = new ArrayList<>();
        ArrayList<Integer> JohnsPin = new ArrayList<>();
        
        ArrayList<Integer> JeffScoreList = new ArrayList<>();
        ArrayList<Integer> JohnScoreList = new ArrayList<>();
        
        PlayerIdentifier playerIdentifier = new PlayerIdentifier();
        int noOfPlayer = playerIdentifier.PlayerIdentifier();
        
        switch (noOfPlayer) {
            case 2: //Calcualte scores for the 2 player case
                if (Files.exists(path)) // if path exists,  o/p info abt it
        {
            try {
                fileInput = new Scanner(path);

                //Pattern JeffScore = Pattern.compile("([Jeff])(\\t)(\\d*)");
                //Pattern JohnScore = Pattern.compile("([John])(\\t)(\\d*)");

                while (fileInput.hasNext()) {
                    String curLine = fileInput.nextLine();
                    String[] splitted = curLine.split("\t");
                    String name = splitted[0].trim();
                    String score = splitted[1].trim();
                    if (!"Jeff".equals(name) && ("F".equals(score))){                        
                          JohnPinfallsList.add("0");
                        } if(!"Jeff".equals(name) && (!"F".equals(score))){
                        JohnPinfallsList.add(score);}
                    
                    if (!"John".equals(name)  && ("F".equals(score))) {                                   
                           JeffPinfallsList.add("0");                
                        }if (!"John".equals(name)  && (!"F".equals(score))){
                        JeffPinfallsList.add(score);}
                    
                }

                System.out.printf("%-20s%-10s%-10s%-10s%-10s%-10s%-10s%-10s%-10s%-10s%-10s%n", "Frame",
                        "1", "2", "3", "4", "5", "6", "7", "8", "9", "10");
                System.out.printf("\n\n%-20s", "Jeff\nPinfalls");
                JeffPinfallsList.forEach((JeffPinfallsList1) -> { 
                    System.out.printf("%-6s", JeffPinfallsList1);
                });
                
                JeffPinfallsList.forEach((s) -> {
                    JeffsPin.add(Integer.valueOf(s));
                });
                JohnPinfallsList.forEach((s) -> {
                    JohnsPin.add(Integer.valueOf(s));
                });
                
                for (Integer i : JeffsPin) {
                    g1.roll(i);
                    JeffScoreList.add(g1.score());
                }
                System.out.printf("\n%-20s", "Scores");
                JeffScoreList.forEach((JeffScoreList1) -> {
                    System.out.printf("%-5d", JeffScoreList1);
                });
                
                
                System.out.printf("\n\n%-20s", "John\nPinfalls");                
                JohnPinfallsList.forEach((JohnPinfallsList1) -> {
                    System.out.printf("%-6s", JohnPinfallsList1);
                });
                
                for (Integer i : JohnsPin) {
                    //John's Scores 
                    g2.roll(i);
                    JohnScoreList.add(g2.score());
                }
                System.out.printf("\n%-20s", "Scores");
                JohnScoreList.forEach((JohnScoreList1) -> {
                    System.out.printf("%-5d", JohnScoreList1);
                });
               
            } catch (IOException ioException) {
                System.err.println("Error opening file. Terminating.");

            } catch (NoSuchElementException elementException) {
                System.err.println("File improperly formed. Terminating.");
            } catch (IllegalStateException stateException) {
                System.err.println("Error reading from file. Terminating.");
            }

            if (fileInput != null) {
                fileInput.close();
            }

        } else {
            System.out.printf("%s does not exists%n", path);
        }    
                break;
            case 1: //Calculates scores for the perfect score and zero 'F' scores cases 
                if (Files.exists(path)) // if path exists,  o/p info abt it
        {
            try {
                fileInput = new Scanner(path);

                while (fileInput.hasNext()) {
                    String curLine = fileInput.nextLine();
                    String[] splitted = curLine.split("\t");
                    String name = splitted[0].trim();
                    String score = splitted[1].trim();
                    playerName = name;
                    if ("F".equals(score)){                        
                          JeffPinfallsList.add("0");
                        } if(!"F".equals(score)){
                        JeffPinfallsList.add(score);}
                  
                }
                System.out.println(playerName);
                System.out.printf("%-20s%-10s%-10s%-10s%-10s%-10s%-10s%-10s%-10s%-10s%-10s%n", "Frame",
                        "1", "2", "3", "4", "5", "6", "7", "8", "9", "10");
                System.out.printf("\n\n%-20s", "Pinfalls");
                JeffPinfallsList.forEach((JeffPinfallsList1) -> { 
                    System.out.printf("%-6s", JeffPinfallsList1);
                });
                
                JeffPinfallsList.forEach((s) -> {
                    JeffsPin.add(Integer.valueOf(s));
                });
                              
                for (Integer i : JeffsPin) {
                    g1.roll(i);
                    JeffScoreList.add(g1.score());
                }
                System.out.printf("\n%-20s", "Scores");
                JeffScoreList.forEach((JeffScoreList1) -> {
                    System.out.printf("%-5d", JeffScoreList1);
                });
                
            } catch (IOException ioException) {
                System.err.println("Error opening file. Terminating.");

            } catch (NoSuchElementException elementException) {
                System.err.println("File improperly formed. Terminating.");
            } catch (IllegalStateException stateException) {
                System.err.println("Error reading from file. Terminating.");
            }

            if (fileInput != null) {
                fileInput.close();
            }

        } else {
            System.out.printf("%s does not exists%n", path);
        } 
                break;
            default:
                throw new AssertionError();
        }

    }

    public static void main(String[] args) {
        TenPinMain();
    }
}
